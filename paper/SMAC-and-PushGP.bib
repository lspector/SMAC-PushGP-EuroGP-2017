% The recommended SMAC paper

@InProceedings{HutHooLey11-SMAC,
	author = {F. Hutter and H.ËœH. Hoos and K. Leyton-Brown},
	title = {Sequential Model-Based Optimization for General
	Algorithm Configuration},
	booktitle = {LION-5},
	series = {LNCS},
	year = {2011},
	pages = {507--523}
}

@inproceedings{hutter2013evaluation,
	title={An evaluation of sequential model-based optimization for expensive blackbox functions},
	author={Hutter, Frank and Hoos, Holger and Leyton-Brown, Kevin},
	booktitle={Proceedings of the 15th annual conference companion on Genetic and evolutionary computation},
	pages={1209--1216},
	year={2013},
	organization={ACM}
}

@inproceedings{McPhee:2016:VGP:2908961.2931741,
	author = {McPhee, Nicholas Freitag and Casale, Maggie M. and Finzel, Mitchell and Helmuth, Thomas and Spector, Lee},
	title = {Visualizing Genetic Programming Ancestries},
	booktitle = {Proceedings of the 2016 on Genetic and Evolutionary Computation Conference Companion},
	series = {GECCO '16 Companion},
	year = {2016},
	isbn = {978-1-4503-4323-7},
	location = {Denver, Colorado, USA},
	pages = {1419--1426},
	numpages = {8},
	url = {http://doi.acm.org/10.1145/2908961.2931741},
	doi = {10.1145/2908961.2931741},
	acmid = {2931741},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {ancestry, evolutionary computation, genetic programming, lineage, visualization},
} 

@Article{Helmuth:2015:ieeeTEC,
	author =	"Thomas Helmuth and Lee Spector and James Matheson",
	title =	"Solving Uncompromising Problems with Lexicase
	Selection",
	journal =	"IEEE Transactions on Evolutionary Computation",
	year = 	"2015",
	volume =	"19",
	number =	"5",
	pages =	"630--643",
	month =	oct,
	keywords =	"genetic algorithms, genetic programming, parent
	selection, lexicase selection, tournament selection,
	PushGP",
	ISSN = 	"1089-778X",
	URL =  	"http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6920034",
	doi =  	"doi:10.1109/TEVC.2014.2362729",
	size = 	"14 pages",
	abstract =	"We describe a broad class of problems, called
	uncompromising problems, characterised by the
	requirement that solutions must perform optimally on
	each of many test cases. Many of the problems that have
	long motivated genetic programming research, including
	the automation of many traditional programming tasks,
	are uncompromising. We describe and analyse the
	recently proposed lexicase parent selection algorition
	and show that it can facilitate the solution of
	uncompromising problems by genetic programming. Unlike
	most traditional parent selection techniques, lexicase
	selection does not base selection on a fitness value
	that is aggregated over all test cases; rather, it
	considers test cases one at a time in random order. We
	present results comparing lexicase selection to more
	traditional parent selection methods, including
	standard tournament selection and implicit fitness
	sharing, on four uncompromising problems: finding terms
	in finite algebras, designing digital multipliers,
	counting words in files, and performing symbolic
	regression of the factorial function. We provide
	evidence that lexicase selection maintains higher
	levels of population diversity than other selection
	methods, which may partially explain its utility as a
	parent selection algorithm in the context of
	uncompromising problems.",
	notes =	"also known as \cite{6920034}",
	doi-url =	"http://dx.doi.org/10.1109/TEVC.2014.2362729",
}

@incollection{Helmuth:2015:GPTP,
	author = {Thomas Helmuth and Nicholas Freitag McPhee and Lee Spector},
	title = {Lexicase selection for program synthesis: a diversity analysis},
	booktitle = {Genetic Programming Theory and Practice XIII},
	date = {2015},
	NOeditor = {?},
	series = {Genetic and Evolutionary Computation},
	publisher = {Springer},
	pubstate = {In press}
}

@phdthesis{Helmuth:2015:dissertation,
	author = {Thomas Helmuth},
	title = {General Program Synthesis from Examples Using Genetic Programming with Parent Selection Based on Random Lexicographic Orderings of Test Cases},
	type = {{Ph.D.} dissertation},
	institution = {University of Massachusetts, Amherst},
	date = {September, 2015},
	year = {2015},
	url = {http://scholarworks.umass.edu/dissertations_2/465/},
}

@inproceedings{Helmuth:2015:GECCO,
	author = {Thomas Helmuth and Lee Spector},
	NOeditor = {Many People},
	title = {General program synthesis benchmark suite},
	booktitle = {GECCO '15: Proceedings of the 2015 Conference on
	Genetic and Evolutionary Computation},
	date = {July, 2015},
	year = {2015},
	eventtitle = {Conference on Genetic and Evolutionary Computation},
	eventdate = {July, 2015},
	location = {Madrid, Spain},
	month = {July},
}

@INPROCEEDINGS{350042,
	author={Thomas B{\"a}ck},
	booktitle={Evolutionary Computation, 1994. IEEE World Congress on Computational Intelligence., Proceedings of the First IEEE Conference on},
	title={Selective pressure in evolutionary algorithms: a characterization of selection mechanisms},
	year={1994},
	month={Jun},
	pages={57-62 vol.1},
	keywords={genetic algorithms;probability;search problems;evolutionary algorithms;experimental investigation;exploration-exploitation tradeoff;genetic algorithm;linear ranking;proportional selection;search space;selection mechanisms;selection operators;selective pressure;simple unimodal objective function;theoretical results;tournament selection;Computer science;Electronic switching systems;Evolutionary computation;Genetic algorithms;Genetic mutations},
	doi={10.1109/ICEC.1994.350042},
}

@inproceedings{Blickle:1995:MAT:645514.658088,
	author = {Blickle, Tobias and Thiele, Lothar},
	title = {A Mathematical Analysis of Tournament Selection},
	booktitle = {Proceedings of the 6th International Conference on Genetic Algorithms},
	year = {1995},
	isbn = {1-55860-370-0},
	pages = {9--16},
	numpages = {8},
	url = {http://dl.acm.org/citation.cfm?id=645514.658088},
	acmid = {658088},
	publisher = {Morgan Kaufmann Publishers Inc.},
	address = {San Francisco, CA, USA},
} 

@incollection{McPhee:2015:GPTP,
	author = {Nicholas Freitag McPhee and David Donatucci and Thomas Helmuth},
	title = {Using Graph Databases to Explore the Dynamics of Genetic Programming Runs},
	booktitle = {Genetic Programming Theory and Practice XIII},
	NOyear = {2015},
	NOeditor = {?},
	series = {Genetic and Evolutionary Computation},
	publisher = {Springer},
	pubstate = {In press}
}

@incollection{McPhee:2016:GPTP,
	author = {Nicholas Freitag McPhee and Mitchell D. Finzel and Maggie M. Casale and Thomas Helmuth and Lee Spector},
	title = {A detailed analysis of a PushGP run},
	booktitle = {Genetic Programming Theory and Practice XIV},
	NOyear = {2016},
	NOeditor = {?},
	series = {Genetic and Evolutionary Computation},
	publisher = {Springer},
	pubstate = {In press}
}

@inproceedings{Starosta:1986:LPL:991365.991400,
	author = {Starosta, Stanley and Nomura, Hirosato},
	title = {Lexicase Parsing: A Lexicon-driven Approach to Syntactic Analysis},
	booktitle = {Proceedings of the 11th Coference on Computational Linguistics},
	series = {COLING '86},
	year = {1986},
	location = {Bonn, Germany},
	pages = {127--132},
	numpages = {6},
	url = {http://dx.doi.org/10.3115/991365.991400},
	doi = {10.3115/991365.991400},
	acmid = {991400},
	publisher = {Association for Computational Linguistics},
	address = {Stroudsburg, PA, USA},
} 

@book{starosta1988case,
	title={The Case for Lexicase: An Outline of Lexicase Grammatical Theory},
	author={Starosta, S.},
	isbn={9780861876396},
	lccn={87032794},
	series={Open linguistics series},
	url={http://books.google.com/books?id=Tl9iAAAAMAAJ},
	year={1988},
	publisher={Pinter Publishers}
}

@InCollection{Krawiec:2015:GPTP,
	author =       "Krawiec, Krzysztof and Swan, Jerry and O'Reilly, Una-May",
	title =        "Behavioral Program Synthesis: Insights and Prospects",
	booktitle =    "Genetic Programming Theory and Practice XIII",
	year =         "2015",
	series =       "Genetic and Evolutionary Computation",
	publisher =    "Springer"
}

@InProceedings{Helmuth:2014:GECCO,
	author =	"Thomas Helmuth and Lee Spector",
	title =	"Word count as a traditional programming benchmark
	problem for genetic programming",
	booktitle =	"GECCO '14: Proceedings of the 2014 conference on
	Genetic and evolutionary computation",
	year = 	"2014",
	NOeditor =	"Christian Igel and Dirk V. Arnold and Christian Gagne
	and Elena Popovici and Anne Auger and Jaume Bacardit
	and Dimo Brockhoff and Stefano Cagnoni and Kalyanmoy
	Deb and Benjamin Doerr and James Foster and Tobias
	Glasmachers and Emma Hart and Malcolm I. Heywood and
	Hitoshi Iba and Christian Jacob and Thomas Jansen and
	Yaochu Jin and Marouane Kessentini and Joshua D.
	Knowles and William B. Langdon and Pedro Larranaga and
	Sean Luke and Gabriel Luque and John A. W. McCall and
	Marco A. {Montes de Oca} and Alison Motsinger-Reif and
	Yew Soon Ong and Michael Palmer and Konstantinos E.
	Parsopoulos and Guenther Raidl and Sebastian Risi and
	Guenther Ruhe and Tom Schaul and Thomas Schmickl and
	Bernhard Sendhoff and Kenneth O. Stanley and Thomas
	Stuetzle and Dirk Thierens and Julian Togelius and
	Carsten Witt and Christine Zarges",
	isbn13 =	"978-1-4503-2662-9",
	pages =	"919--926",
	keywords =	"genetic algorithms, genetic programming",
	month =	"12-16 " # jul,
	organisation = "SIGEVO",
	address =	"Vancouver, BC, Canada",
	URL =  	"http://doi.acm.org/10.1145/2576768.2598230",
	doi =  	"doi:10.1145/2576768.2598230",
	publisher =	"ACM",
	publisher_address = "New York, NY, USA",
	abstract =	"The Unix utility program wc, which stands for word
	count, takes any number of files and prints the number
	of newlines, words, and characters in each of the
	files. We show that genetic programming can find
	programs that replicate the core functionality of the
	wc utility, and propose this problem as a traditional
	programming benchmark for genetic programming systems.
	This wc problem features key elements of programming
	tasks that often confront human programmers, including
	requirements for multiple data types, a large
	instruction set, control flow, and multiple outputs.
	Furthermore, it mimics the behavior of a real-world
	utility program, showing that genetic programming can
	automatically synthesize programs with general utility.
	We suggest statistical procedures that should be used
	to compare performances of different systems on
	traditional programming problems such as the wc
	problem, and present the results of a short experiment
	using the problem. Finally, we give a short analysis of
	evolved solution programs, showing how they make use of
	traditional programming concepts.",
	notes =	"Also known as \cite{2598230} GECCO-2014 A joint
	meeting of the twenty third international conference on
	genetic algorithms (ICGA-2014) and the nineteenth
	annual genetic programming conference (GP-2014)",
	doi-url =	"http://dx.doi.org/10.1145/2576768.2598230",
}

@InProceedings{Krawiec:2015:GECCO:smgpWorkshop,
	author =	"Pawe{\l} Liskowski and Krzysztof Krawiec and Thomas Helmuth and Lee Spector",
	title =	"Comparison of Semantic-aware Selection Methods in Genetic Programming",
	booktitle =	"GECCO 2015 workshop on Semantic Methods in Genetic Programming",
	year = 	"2015",
	publisher =	"ACM",
}

@InProceedings{Helmuth:2013:GECCOcomp,
	author =	"Thomas Helmuth and Lee Spector",
	title =	"Evolving a digital multiplier with the pushgp genetic
	programming system",
	booktitle =	"GECCO '13 Companion: Proceeding of the fifteenth
	annual conference companion on Genetic and evolutionary
	computation conference companion",
	year = 	"2013",
	TooManyeditor =	"Christian Blum and Enrique Alba and Thomas
	Bartz-Beielstein and Daniele Loiacono and Francisco
	Luna and Joern Mehnen and Gabriela Ochoa and Mike
	Preuss and Emilia Tantar and Leonardo Vanneschi",
	isbn13 =	"978-1-4503-1964-5",
	keywords =	"genetic algorithms, genetic programming",
	pages =	"1627--1634",
	month =	"6-10 " # jul,
	organisation = "SIGEVO",
	address =	"Amsterdam, The Netherlands",
	doi =  	"doi:10.1145/2464576.2466814",
	publisher =	"ACM",
	publisher_address = "New York, NY, USA",
	abstract =	"A recent article on benchmark problems for genetic
	programming suggested that researchers focus attention
	on the digital multiplier problem, also known as the
	multiple output multiplier problem, in part because it
	is scalable and in part because the requirement of
	multiple outputs presents challenges for some forms of
	genetic programming [20]. Here we demonstrate the
	application of stack-based genetic programming to the
	digital multiplier problem using the PushGP genetic
	programming system, which evolves programs expressed in
	the stack-based Push programming language. We
	demonstrate the use of output instructions and argue
	that they provide a natural mechanism for producing
	multiple outputs in a stack-based genetic programming
	context. We also show how two recent developments in
	PushGP dramatically improve the performance of the
	system on the digital multiplier problem. These
	developments are the ULTRA genetic operator, which
	produces offspring via Uniform Linear Transformation
	with Repair and Alternation [12], and lexicase
	selection, which selects parents according to
	performance on cases considered sequentially in random
	order [11]. Our results using these techniques show not
	only their utility, but also the utility of the digital
	multiplier problem as a benchmark problem for genetic
	programming research. The results also demonstrate the
	exibility of stack-based genetic programming for
	solving problems with multiple outputs and for serving
	as a platform for experimentation with new genetic
	programming techniques.",
	notes =	"Also known as \cite{2466814} Distributed at
	GECCO-2013.",
	doi-url =	"http://dx.doi.org/10.1145/2464576.2466814",
}

@InCollection{Spector:2013:GPTP,
	author =	"Lee Spector and Thomas Helmuth",
	title =	"Uniform Linear Transformation with Repair and
	Alternation in Genetic Programming",
	booktitle =	"Genetic Programming Theory and Practice XI",
	year = 	"2013",
	series =	"Genetic and Evolutionary Computation",
	NOeditor =	"Rick Riolo and Jason H. Moore and Mark Kotanchek",
	publisher =	"Springer",
	chapter =	"8",
	pages =	"137--153",
	address =	"Ann Arbor, USA",
	month =	"9-11 " # may,
	keywords =	"genetic algorithms, genetic programming, Uniform
	mutation, Uniform crossover, ULTRA, Push, PushGP, Drug
	bioavailability problem, Pagie-1 problem, Factorial
	regression, Boolean multiplexer problem",
	isbn13 =	"978-1-4939-0374-0",
	doi =  	"doi:10.1007/978-1-4939-0375-7_8",
	abstract =	"Several genetic programming researchers have argued
	for the utility of genetic operators that act
	uniformly. By act uniformly we mean two specific
	things: that the probability of an inherited program
	component being modified during inheritance is
	independent of the size and shape of the parent
	programs beyond the component in question; and that
	pairs of parents are combined in ways that allow
	arbitrary combinations of components from each parent
	to appear in the child. Uniform operators described in
	previous work have had limited utility, however,
	because of a mismatch between the relevant notions of
	uniformity and the hierarchical structure and variable
	sizes of many genetic programming representations. In
	this chapter we describe a new genetic operator, ULTRA,
	which incorporates aspects of both mutation and
	crossover and acts approximately uniformly across
	programs of variable sizes and structures. ULTRA treats
	hierarchical programs as linear sequences and includes
	a repair step to ensure that syntax constraints are
	satisfied after variation. We show that on the drug
	bioavailability and Pagie-1 benchmark problems ULTRA
	produces significant improvements both in
	problem-solving power and in program size relative to
	standard operators. Experiments with factorial
	regression and with the Boolean 6-multiplexer problem
	demonstrate that ULTRA can manipulate programs that
	make use of hierarchical structure, but also that it is
	not always beneficial. The demonstrations evolve
	programs in the Push programming language, which makes
	repair particularly simple, but versions of the
	technique should be applicable in other genetic
	programming systems as well.",
	notes =	"http://cscs.umich.edu/gptp-workshops/ Part of
	\cite{Riolo:2013:GPTP} published after the workshop in
	2013",
	doi-url =	"http://dx.doi.org/10.1007/978-1-4939-0375-7_8",
}

@InProceedings{Spector:2012:GECCOcompANEW,
	author =	"Lee Spector",
	title =	"Assessment of Problem Modality by Differential
	Performance of Lexicase Selection in Genetic
	Programming: {A} Preliminary Report",
	booktitle =	"1st workshop on Understanding Problems (GECCO-UP)",
	year = 	"2012",
	NOeditor =	"Kent McClymont and Ed Keedwell",
	isbn13 =	"978-1-4503-1178-6",
	keywords =	"genetic algorithms, genetic programming, modal
	problems, selection, lexicase selection, problem
	metrics, modality",
	pages =	"401--408",
	month =	"7-11 " # jul,
	organisation = "SIGEVO",
	address =	"Philadelphia, Pennsylvania, USA",
	NOURL =  	"http://hampshire.edu/lspector/pubs/wk09p4-spector.pdf",
	doi =  	"doi:10.1145/2330784.2330846",
	publisher =	"ACM",
	publisher_address = "New York, NY, USA",
	size = 	"8 pages",
	abstract =	"Many potential target problems for genetic programming
	are modal in the sense that qualitatively different
	modes of response are required for inputs from
	different regions of the problem's domain. This paper
	presents a new approach to solving modal problems with
	genetic programming, using a simple and novel parent
	selection method called lexicase selection. It then
	shows how the differential performance of genetic
	programming with and without lexicase selection can be
	used to provide a measure of problem modality, and it
	argues that defining such a measure in this way is not
	as methodologically problematic as it may initially
	appear. The modality measure is illustrated through the
	analysis of genetic programming runs on a simple modal
	symbolic regression problem. This is a preliminary
	report that is intended in part to stimulate discussion
	on the significance of modal problems, methods for
	solving them, and methods for measuring the modality of
	problems. Although the core concepts in this paper are
	presented in the context of genetic programming, they
	are also relevant to applications of other forms of
	evolutionary computation to modal problems.",
	notes =	"p403 'allowing the high-performing individual [on any
	test case] to contribute to the following generation,
	regardless of [its] performance on other cases.' p405
	'with population size 10000 the overall cost of
	producing offspring using lexicase selection can exceed
	that of using ordinary tournaments by between one and
	two orders of magnitude'. (why?) Section 5: integer
	symbolic regresions with one, two or three 'modes'.
	Clojure lexicase.clj
	https://gist.github.com/lspector/2320883 Also known as
	\cite{2330846} Distributed at GECCO-2012. ACM Order
	Number 910122.",
	doi-url =	"http://dx.doi.org/10.1145/2330784.2330846",
}

@InProceedings{McKay:2000:GECCO,
	author =	"McKay, Robert I.",
	title =	"Fitness Sharing in Genetic Programming",
	pages =	"435--442",
	year = 	"2000",
	publisher =	"Morgan Kaufmann",
	booktitle =	"Proceedings of the Genetic and Evolutionary
	Computation Conference (GECCO-2000)",
	NOeditor =	"Darrell Whitley and David Goldberg and Erick Cantu-Paz
	and Lee Spector and Ian Parmee and Hans-Georg Beyer",
	address =	"Las Vegas, Nevada, USA",
	publisher_address = "San Francisco, CA 94104, USA",
	month =	"10-12 " # jul,
	keywords =	"genetic algorithms, genetic programming",
	ISBN = 	"1-55860-708-0",
	URL =  	"http://www.cs.bham.ac.uk/~wbl/biblio/gecco2000/GP256.pdf",
	URL =  	"http://www.cs.bham.ac.uk/~wbl/biblio/gecco2000/GP256.ps",
	notes =	"A joint meeting of the ninth International Conference
	on Genetic Algorithms (ICGA-2000) and the fifth Annual
	Genetic Programming Conference (GP-2000) Part of
	\cite{whitley:2000:GECCO}",
}



%%% Other selection techniques

@InProceedings{Fieldsend:2015:GECCO,
	author =	"Fieldsend, Jonathan E. and Moraglio, Alberto",
	title =	"Strength through diversity: Disaggregation and multi-objectivisation approaches for genetic programming",
	booktitle =	"GECCO '15: Proceedings of the 2015 conference on
	Genetic and evolutionary computation",
	year = 	"2015",
	publisher =	"ACM",
}

@InProceedings{Krawiec:ppsn2010,
	author =	"Krzysztof Krawiec and Pawel Lichocki",
	title =	"Using Co-solvability to Model and Exploit Synergetic
	Effects in Evolution",
	booktitle =	"PPSN 2010 11th International Conference on Parallel
	Problem Solving From Nature",
	pages =	"492--501",
	year = 	"2010",
	volume =	"6239",
	NOeditor =	"Robert Schaefer and Carlos Cotta and Joanna Kolodziej
	and Guenter Rudolph",
	publisher =	"Springer",
	series =	"Lecture Notes in Computer Science",
	isbn13 =	"978-3-642-15870-4",
	address =	"Krakow, Poland",
	month =	"11-15 " # sep,
	keywords =	"genetic algorithms, genetic programming",
	doi =  	"doi:10.1007/978-3-642-15871-1_50",
	abstract =	"We introduce, analyse, and experimentally examine
	co-solvability, an ability of a solution to solve a
	pair of fitness cases (tests). Based on this concept,
	we devise a co-solvability fitness function that makes
	solutions compete for rewards granted for solving pairs
	of tests, in a way analogous to implicit fitness
	sharing. We prove that co-solvability fitness function
	is by definition synergistic and imposes selection
	pressure which is qualitatively different from that of
	standard fitness function or implicit fitness sharing.
	The results of experimental verification on eight
	genetic programming tasks demonstrate that evolutionary
	runs driven by co-solvability fitness function usually
	converge faster to well-performing solutions and are
	more likely to reach global optima.",
	doi-url =	"http://dx.doi.org/10.1007/978-3-642-15871-1_50",
}

@InProceedings{Krawiec:2015:EuroGP,
	author =	"Krzysztof Krawiec and Pawel Liskowski",
	title =	"Automatic Derivation of Search Objectives for
	Test-Based Genetic Programming",
	booktitle =	"18th European Conference on Genetic Programming",
	year = 	"2015",
	NOeditor =	"Penousal Machado and Malcolm I. Heywood and James
	McDermott and Mauro Castelli and Pablo Garcia-Sanchez
	and Paolo Burelli and Sebastian Risi and Kevin Sim",
	series =	"LNCS",
	volume =	"9025",
	publisher =	"Springer",
	pages =	"53--65",
	address =	"Copenhagen",
	month =	"8-10 " # apr,
	organisation = "EvoStar",
	keywords =	"genetic algorithms, genetic programming, Program
	synthesis, Test-based problems, Multiobjective
	evolutionary computation",
	isbn13 =	"978-3-319-16500-4",
	doi =  	"doi:10.1007/978-3-319-16501-1_5",
	abstract =	"In genetic programming (GP), programs are usually
	evaluated by applying them to tests, and fitness
	function indicates only how many of them have been
	passed. We posit that scrutinising the outcomes of
	programs interactions with individual tests may help
	making program synthesis more effective. To this aim,
	we propose DOC, a method that autonomously derives new
	search objectives by clustering the outcomes of
	interactions between programs in the population and the
	tests. The derived objectives are subsequently used to
	drive the selection process in a single or
	multiobjective fashion. An extensive experimental
	assessment on 15 discrete program synthesis tasks
	representing two domains shows that DOC significantly
	outperforms conventional GP and implicit fitness
	sharing.",
	notes =	"Part of \cite{Machado:2015:GP} EuroGP'2015 held in
	conjunction with EvoCOP2015, EvoMusArt2015 and
	EvoApplications2015",
	doi-url =	"http://dx.doi.org/10.1007/978-3-319-16501-1_5",
}

@InProceedings{Galvan-Lopez:2013:CEC,
	article_id =	"1650",
	author =	"Edgar Galv{\'a}n-L{\'o}pez and Brendan Cody-Kenny and Leonardo
	Trujillo and Ahmed Kattan",
	title =	"Using Semantics in the Selection Mechanism in Genetic
	Programming: A Simple Method for Promoting Semantic
	Diversity",
	booktitle =	"2013 IEEE Conference on Evolutionary Computation",
	volume =	"1",
	year = 	"2013",
	month =	jun # " 20-23",
	editor =	"Luis Gerardo {de la Fraga}",
	pages =	"2972--2979",
	address =	"Cancun, Mexico",
	keywords =	"genetic algorithms, genetic programming",
	isbn13 =	"978-1-4799-0453-2",
	doi =  	"doi:10.1109/CEC.2013.6557931",
	notes =	"CEC 2013 - A joint meeting of the IEEE, the EPS and
	the IET.",
	doi-url =	"http://dx.doi.org/10.1109/CEC.2013.6557931",
}


@Article{spector:2002:GPEM,
	author =       "Lee Spector and Alan Robinson",
	title =        "Genetic Programming and Autoconstructive Evolution
	with the Push Programming Language",
	journal =      "Genetic Programming and Evolvable Machines",
	year =         "2002",
	volume =       "3",
	number =       "1",
	pages =        "7--40",
	month =        mar,
	keywords =     "genetic algorithms, genetic programming, artificial
	life, modularity, programming languages,
	self-adaptation",
	ISSN =         "1389-2576",
	URL =          "http://hampshire.edu/lspector/pubs/push-gpem-final.pdf",
	doi =          "doi:10.1023/A:1014538503543",
	abstract =     "Push is a programming language designed for the
	expression of evolving programs within an evolutionary
	computation system. This article describes Push and
	illustrates some of the opportunities that it presents
	for evolutionary computation. Two evolutionary
	computation systems, PushGP and Pushpop, are described
	in detail. PushGP is a genetic programming system that
	evolves Push programs to solve computational problems.
	Pushpop, an ?autoconstructive evolution? system, also
	evolves Push programs but does so while simultaneously
	evolving its own evolutionary mechanisms.",
	notes =        "Article ID: 395988",
}

@InProceedings{1068292,
	author =       "Lee Spector and Jon Klein and Maarten Keijzer",
	title =        "The {Push3} execution stack and the evolution of
	control",
	booktitle =    "{GECCO 2005}: Proceedings of the 2005 conference on
	Genetic and evolutionary computation",
	year =         "2005",
	ISBN =         "1-59593-010-8",
	pages =        "1689--1696",
	address =      "Washington DC, USA",
	URL =          "http://www.cs.bham.ac.uk/~wbl/biblio/gecco2005/docs/p1689.pdf",
	doi =          "doi:10.1145/1068009.1068292",
	publisher =    "ACM Press",
	publisher_address = "New York, NY, 10286-1405, USA",
	organisation = "ACM SIGEVO (formerly ISGEC)",
	keywords =     "genetic algorithms, genetic programming, combinators,
	experimentation, exponentiation, factorial, Fibonacci
	sequence, iteration, languages, parity, push,
	recursion, reversing a list, sorting, stack-based
	genetic programming",
	abstract =     "One of Push's attractive features in this context is
	its transparent support for the expression and
	evolution of modular architectures and complex control
	structures, achieved through explicit code
	self-manipulation. The latest version of Push, Push3,
	enhances this feature by permitting explicit
	manipulation of an execution stack that contains the
	expressions that are queued for execution in the
	interpreter. presents a series of examples in which
	Push3 was used with a simple genetic programming system
	(PushGP) to evolve programs with non-trivial control
	structures.",
	notes =        "GECCO-2005 A joint meeting of the fourteenth
	international conference on genetic algorithms
	(ICGA-2005) and the tenth annual genetic programming
	conference (GP-2005).
	
	ACM Order Number 910052
	
	Cited by \cite{eurogp06:AgapitosLucas}
	
	EXEC stack. Combinators. Reentrant p1691 'the
	re-entrant interpreter allows for the controlled
	execution of a particular number of instructions per
	time-step.' Reversing a list. Factorial. Fibonacci.
	Parity. Powers of two, integer exponentiation
	Expt(2,n). Sorting a list.",
}

%% Simplification in Push

@MastersThesis{Robinson:2001:GPtieus,
  author =	"Alan Robinson",
  title =	"Genetic Programming: Theory, Implementation, and the
		 Evolution of Unconstrained Solutions",
  school =	"Hampshire College",
  year = 	"2001",
  type = 	"Division III thesis",
  month =	may,
  keywords =	"genetic algorithms, genetic programming, PushGP, LJGP
		 Linear Java GP, Lawnmower problem, Grazer problem",
  URL =  	"http://hampshire.edu/lspector/robinson-div3.pdf",
  URL =  	"http://citeseer.ist.psu.edu/498673.html",
  size = 	"127 pages",
  abstract =	"Part I: Background 1 INTRODUCTION 1.1 BACKGROUND ?
		 AUTOMATIC PROGRAMMING 1.2 THIS PROJECT 1.3 SUMMARY OF
		 CHAPTERS 2 GENETIC PROGRAMMING REVIEW Part II: PushGP 3
		 THE PUSH LANGUAGE & PUSHGP 4 PUSHGP COMPARED TO GP2
		 WITH ADFS 4.1 CAN A MORE FLEXIBLE SYSTEM PERFORM AS
		 WELL? 4.2 THE COMPUTATIONAL EFFORT METRIC 4.3 MEASURING
		 MODULARITY 4.4 SOLVING SYMBOLIC REGRESSION 4.5 EVEN
		 PARITY AS A GP BENCHMARK 4.6 SOLVING EVEN-FOUR-PARITY
		 USING PUSHGP AND STACK INPUT 4.7 EVEN-FOUR-PARITY WITH
		 INPUT FUNCTIONS 4.8 EVEN-SIX-PARITY 4.9 SOLVING
		 EVEN-N-PARITY 4.10 CONCLUSIONS DRAWN FROM THIS CHAPTER
		 5 VARIATIONS IN GENETIC OPERATORS 5.1 PERFORMANCE OF
		 BASE PUSHGP OPERATORS 5.2 VARIATIONS IN CROSSOVER 5.3
		 VARIATIONS IN MUTATION 5.4 EMPIRICAL TESTS WITH NEW
		 OPERATORS 5.5 CONCLUSIONS DRAWN FROM THESE RUNS 6
		 NEWGROUND ? EVOLVING FACTORIAL Part III: LJGP 7 LINEAR
		 CODED GENETIC PROGRAMMING IN JAVA 7.4 DISTRIBUTED
		 PROCESSING 8 LJGP USER?S GUIDE 8.1 ENCODING A PROBLEM
		 8.2 LJGP PACKAGES AND CLASSES OVERVIEW 8.3 VCPU
		 PROGRAMS 9 LJGP APPLIED 9.1 LAWNMOWER PILOT STUDY 9.2
		 PROBLEM DESCRIPTION 9.3 THE GENETIC MAKEUP OF AN
		 INDIVIDUAL 9.4 THE MECHANICS OF EVOLUTION 9.5 PILOT
		 RUNS OF THE LAWNMOWER PROBLEM 9.6 GRAZER PILOT STUDY
		 9.7 CONCLUSION TO LJGP APPLIED Conclusion APPENDIX A.
		 COMPUTATIONAL EFFORT ? LISP CODE APPENDIX B. GENETIC
		 PROGRAMMING SYSTEMS IN JAVA APPENDIX C. LJGP/JAVA-VM
		 BENCHMARKS",
}

@InProceedings{Spector:2014:GECCOcomp,
  author =	"Lee Spector and Thomas Helmuth",
  title =	"Effective simplification of evolved push programs
		 using a simple, stochastic hill-climber",
  booktitle =	"GECCO Comp '14: Proceedings of the 2014 conference
		 companion on Genetic and evolutionary computation
		 companion",
  year = 	"2014",
  NOeditor =	"Christian Igel and Dirk V. Arnold and Christian Gagne
		 and Elena Popovici and Anne Auger and Jaume Bacardit
		 and Dimo Brockhoff and Stefano Cagnoni and Kalyanmoy
		 Deb and Benjamin Doerr and James Foster and Tobias
		 Glasmachers and Emma Hart and Malcolm I. Heywood and
		 Hitoshi Iba and Christian Jacob and Thomas Jansen and
		 Yaochu Jin and Marouane Kessentini and Joshua D.
		 Knowles and William B. Langdon and Pedro Larranaga and
		 Sean Luke and Gabriel Luque and John A. W. McCall and
		 Marco A. {Montes de Oca} and Alison Motsinger-Reif and
		 Yew Soon Ong and Michael Palmer and Konstantinos E.
		 Parsopoulos and Guenther Raidl and Sebastian Risi and
		 Guenther Ruhe and Tom Schaul and Thomas Schmickl and
		 Bernhard Sendhoff and Kenneth O. Stanley and Thomas
		 Stuetzle and Dirk Thierens and Julian Togelius and
		 Carsten Witt and Christine Zarges",
  isbn13 =	"978-1-4503-2881-4",
  keywords =	"genetic algorithms, genetic programming: Poster",
  pages =	"147--148",
  month =	"12-16 " # jul,
  organisation = "SIGEVO",
  address =	"Vancouver, BC, Canada",
  URL =  	"http://doi.acm.org/10.1145/2598394.2598414",
  doi =  	"doi:10.1145/2598394.2598414",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  abstract =	"Genetic programming systems often produce programs
		 that include unnecessary code. This is undesirable for
		 several reasons, including the burdens that
		 overly-large programs put on end-users for program
		 interpretation and maintenance. The problem is
		 exacerbated by recently developed techniques, such as
		 genetic programming with geometric semantic crossover,
		 that tend to produce enormous programs. Methods for
		 automatically simplifying evolved programs are
		 therefore of interest, but automatic simplification is
		 non-trivial in the context of traditional program
		 representations with unconstrained function sets. Here
		 we show how evolved programs expressed in the
		 stack-based Push programming language can be
		 automatically and reliably simplified using a simple,
		 stochastic hill-climber. We demonstrate and
		 quantitatively characterise this simplification process
		 on programs evolved to solve four non-trivial genetic
		 programming problems with qualitatively different
		 function sets.",
  notes =	"Also known as \cite{2598414} Distributed at
		 GECCO-2014.",
  doi-url =	"http://dx.doi.org/10.1145/2598394.2598414",
}

@InProceedings{Zhan:2014:GECCOcomp,
  author =	"Haoxi Zhan",
  title =	"A quantitative analysis of the simplification genetic
		 operator",
  booktitle =	"GECCO 2014 student workshop",
  year = 	"2014",
  editor =	"Tea Tusar and Boris Naujoks",
  isbn13 =	"978-1-4503-2881-4",
  keywords =	"genetic algorithms, genetic programming",
  pages =	"1077--1080",
  month =	"12-16 " # jul,
  organisation = "SIGEVO",
  address =	"Vancouver, BC, Canada",
  URL =  	"http://doi.acm.org/10.1145/2598394.2605684",
  doi =  	"doi:10.1145/2598394.2605684",
  publisher =	"ACM",
  publisher_address = "New York, NY, USA",
  abstract =	"The simplification function was introduced to PushGP
		 as a tool to reduce the sizes of evolved programs in
		 final reports. While previous work suggests that
		 simplification could reduce the sizes significantly,
		 nothing has been done to study its impacts on the
		 evolution of Push programs. In this paper, we show the
		 impact of simplification as a genetic operator. By
		 conducting test runs on the U.S. change problem, we
		 show that using simplification operator with PushGP,
		 lexicase selection and ULTRA could increase the
		 possibility to find solutions in the short term while
		 it might remove some useful genetic materials for the
		 long term.",
  notes =	"Clojush Also known as \cite{2605684} Distributed at
		 GECCO-2014.",
  doi-url =	"http://dx.doi.org/10.1145/2598394.2605684",
}



%% Simplification in GP

@InProceedings{Kinzett:2010:cec,
  author =	"David Kinzett and Mengjie Zhang and Mark Johnston",
  title =	"Investigation of simplification threshold and noise
		 level of input data in numerical simplification of
		 genetic programs",
  booktitle =	"IEEE Congress on Evolutionary Computation (CEC 2010)",
  year = 	"2010",
  address =	"Barcelona, Spain",
  month =	"18-23 " # jul,
  publisher =	"IEEE Press",
  keywords =	"genetic algorithms, genetic programming",
  isbn13 =	"978-1-4244-6910-9",
  abstract =	"In tree based Genetic Programming (GP) there is a
		 tendency for program sizes to increase as the run
		 proceeds without a corresponding improvement in
		 fitness. This increases resource usage, both memory and
		 CPU time, and may result in over-fitting the training
		 data. Numerical simplification is a method for removing
		 redundant code from the program trees as the run
		 proceeds. Compared with the canonical genetic
		 programming method, numerical simplification can
		 generate much smaller programs, use much shorter
		 evolutionary training times and achieve comparable
		 effectiveness performance. A key parameter of this
		 method is the simplification threshold. This paper
		 examines whether there exists any relationship between
		 the noise level in the input data and the optimum value
		 for the simplification threshold and, if it exists,
		 what that relationship is. Our results suggest that
		 there is a relationship between the optimum value of
		 the simplification threshold and the level of noise in
		 the input data and that a lower bound for the optimum
		 simplification threshold is equal to the noise level
		 and an upper bound is five times the noise level.",
  doi =  	"doi:10.1109/CEC.2010.5586181",
  notes =	"WCCI 2010. Also known as \cite{5586181}",
  doi-url =	"http://dx.doi.org/10.1109/CEC.2010.5586181",
}

@inproceedings{hansen1996adapting,
	title={Adapting arbitrary normal mutation distributions in evolution strategies: The covariance matrix adaptation},
	author={Hansen, Nikolaus and Ostermeier, Andreas},
	booktitle={Evolutionary Computation, 1996., Proceedings of IEEE International Conference on},
	pages={312--317},
	year={1996},
	organization={IEEE}
}

@inproceedings{back1993optimal,
	title={Optimal mutation rates in genetic search},
	author={Back, Thomas},
	booktitle={Proceedings of the fifth international conference on genetic algorithms},
	pages={2--8},
	year={1993},
	organization={Morgan Kaufmann, San Mateo, CA}
}

@inproceedings{alander1992optimal,
	title={On optimal population size of genetic algorithms},
	author={Alander, Jarmo T},
	booktitle={CompEuro'92.'Computer Systems and Software Engineering', Proceedings.},
	pages={65--70},
	year={1992},
	organization={IEEE}
}

@article{brest2006self,
	title={Self-adapting control parameters in differential evolution: A comparative study on numerical benchmark problems},
	author={Brest, Janez and Greiner, Sao and Boskovic, Borko and Mernik, Marjan and Zumer, Viljem},
	journal={IEEE transactions on evolutionary computation},
	volume={10},
	number={6},
	pages={646--657},
	year={2006},
	publisher={IEEE}
}

@book{lobo2007parameter,
	title={Parameter setting in evolutionary algorithms},
	author={Lobo, FJ and Lima, Cl{\'a}udio F and Michalewicz, Zbigniew},
	volume={54},
	year={2007},
	publisher={Springer Science \& Business Media}
}

@inproceedings{spector2:2001:gecco,
	abstract = {This paper is a preliminary report on autoconstructive
	evolution, a framework for evolutionary computation in
	which the machinery of reproduction and diversification
	(and thereby the machinery of evolution) evolves within
	the individuals of an evolving population of problem
	solvers. Autoconstructive evolution is illustrated with
	Pushpop, an evolving population of programs expressed
	in the Push programming language. The Push programming
	language can also be used in a more traditional genetic
	programming framework and may have unique benefits when
	so employed; the PushGP system, which uses traditional
	genetic programming techniques to evolve Push programs,
	is also described.},
	address = {San Francisco, California, USA},
	author = {Spector, Lee},
	booktitle = {Proceedings of the Genetic and Evolutionary
	Computation Conference (GECCO-2001)},
	editor = {Spector, Lee and Goodman, Erik D. and Wu, Annie and Langdon, W. B. and Voigt, Hans-Michael and Gen, Mitsuo and Sen, Sandip and Dorigo, Marco and Pezeshk, Shahram and Garzon, Max H. and Burke, Edmund},
	interhash = {6388bfbe7d6aa16bcd26b49efc1c09ac},
	intrahash = {e56910c3c837eca761247560e2a0ac31},
	isbn = {1-55860-774-9},
	month = {7-11 July},
	notes = {GECCO-2001 A joint meeting of the tenth International
	Conference on Genetic Algorithms (ICGA-2001) and the
	sixth Annual Genetic Programming Conference (GP-2001)
	Part of \cite{spector:2001:GECCO}
	
	Slides at the 2001 Genetic and Evolutionary Computation
	Conference (GECCO-2001).
	http://hampshire.edu/lspector/ACE-GECCO.pdf},
	pages = {137--146},
	publisher = {Morgan Kaufmann},
	publisher_address = {San Francisco, CA 94104, USA},
	title = {Autoconstructive Evolution: Push, Push{GP}, and
	Pushpop},
	url = {http://www.cs.bham.ac.uk/~wbl/biblio/gecco2001/d01.pdf},
	year = 2001
}

@InProceedings{push3gecco,
	author =       "Lee Spector and Jon Klein and Maarten Keijzer",
	title =        "The Push3 execution stack and the evolution of
	control",
	booktitle =    "{GECCO 2005}: Proceedings of the 2005 conference on
	Genetic and evolutionary computation",
	year =         "2005",
	editor =       "Hans-Georg Beyer and Una-May O'Reilly and 
	Dirk V. Arnold and Wolfgang Banzhaf and Christian Blum and 
	Eric W. Bonabeau and Erick Cantu-Paz and 
	Dipankar Dasgupta and Kalyanmoy Deb and James A. Foster and 
	Edwin D. {de Jong} and Hod Lipson and Xavier Llora and 
	Spiros Mancoridis and Martin Pelikan and Guenther R. Raidl and 
	Terence Soule and Andy M. Tyrrell and 
	Jean-Paul Watson and Eckart Zitzler",
	volume =       "2",
	ISBN =         "1-59593-010-8",
	pages =        "1689--1696",
	address =      "Washington DC, USA",
	URL =          "http://www.cs.bham.ac.uk/~wbl/biblio/gecco2005/docs/p1689.pdf",
	doi =          "doi:10.1145/1068009.1068292",
	publisher =    "ACM Press",
	publisher_address = "New York, NY, 10286-1405, USA",
	month =        "25-29 " # jun,
	organisation = "ACM SIGEVO (formerly ISGEC)",
	keywords =     "genetic algorithms, genetic programming, combinators,
	experimentation, exponentiation, factorial, Fibonacci
	sequence, iteration, languages, parity, push,
	recursion, reversing a list, sorting, stack-based
	genetic programming",
	abstract =     "One of Push's attractive features in this context is
	its transparent support for the expression and
	evolution of modular architectures and complex control
	structures, achieved through explicit code
	self-manipulation. The latest version of Push, Push3,
	enhances this feature by permitting explicit
	manipulation of an execution stack that contains the
	expressions that are queued for execution in the
	interpreter. presents a series of examples in which
	Push3 was used with a simple genetic programming system
	(PushGP) to evolve programs with non-trivial control
	structures.",
	notes =        "GECCO-2005 A joint meeting of the fourteenth
	international conference on genetic algorithms
	(ICGA-2005) and the tenth annual genetic programming
	conference (GP-2005).
	
	ACM Order Number 910052
	
	Cited by \cite{eurogp06:AgapitosLucas}
	
	EXEC stack. Combinators. Reentrant p1691 'the
	re-entrant interpreter allows for the controlled
	execution of a particular number of instructions per
	time-step.' Reversing a list. Factorial. Fibonacci.
	Parity. Powers of two, integer exponentiation
	Expt(2,n). Sorting a list.",
}

@article{helmuthlinear,
	title={Linear Genomes for Structured Programs},
	author={Helmuth, Thomas and Spector, Lee and McPhee, Nicholas Freitag and Shanabrook, Saul},
	booktitle = {Genetic Programming Theory and Practice XIV},
	year = {2016},
	series = {Genetic and Evolutionary Computation},
	publisher = {Springer},
	pubstate = {In press}
}

@incollection{la2015inheritable,
	title={Inheritable Epigenetics in Genetic Programming},
	author={La Cava, William and Spector, Lee},
	booktitle={Genetic Programming Theory and Practice XII},
	pages={37--51},
	year={2015},
	publisher={Springer}
}

@inproceedings{Hoos:2016:TCM:2908812.2908960,
	author = {Hoos, Holger H.},
	title = {Taming the Complexity Monster or: How I Learned to Stop Worrying and Love Hard Problems},
	booktitle = {Proceedings of the Genetic and Evolutionary Computation Conference 2016},
	series = {GECCO '16},
	year = {2016},
	isbn = {978-1-4503-4206-3},
	location = {Denver, Colorado, USA},
	pages = {3--4},
	numpages = {2},
	url = {http://doi.acm.org/10.1145/2908812.2908960},
	doi = {10.1145/2908812.2908960},
	acmid = {2908960},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {automated algorithm design, computational complexity, empirical algorithmics, np-hardness, programming by optimisation (pbo), scaling analysis},
} 

@Article{Helmuth:2014:ieeeTEC,
	author =       "Thomas Helmuth and Lee Spector and James Matheson",
	title =        "Solving Uncompromising Problems with Lexicase
	Selection",
	year =         {2014},
	journal =      "IEEE Transactions on Evolutionary Computation",
	note =         "Accepted for future publication",
	keywords =     "genetic algorithms, genetic programming, parent
	selection, lexicase selection, tournament selection,
	PushGP",
	ISSN =         "1089-778X",
	doi =          "doi:10.1109/TEVC.2014.2362729",
	size =         "14 pages",
	abstract =     "We describe a broad class of problems, called
	uncompromising problems, characterised by the
	requirement that solutions must perform optimally on
	each of many test cases. Many of the problems that have
	long motivated genetic programming research, including
	the automation of many traditional programming tasks,
	are uncompromising. We describe and analyse the
	recently proposed lexicase parent selection algorition
	and show that it can facilitate the solution of
	uncompromising problems by genetic programming. Unlike
	most traditional parent selection techniques, lexicase
	selection does not base selection on a fitness value
	that is aggregated over all test cases; rather, it
	considers test cases one at a time in random order. We
	present results comparing lexicase selection to more
	traditional parent selection methods, including
	standard tournament selection and implicit fitness
	sharing, on four uncompromising problems: finding terms
	in finite algebras, designing digital multipliers,
	counting words in files, and performing symbolic
	regression of the factorial function. We provide
	evidence that lexicase selection maintains higher
	levels of population diversity than other selection
	methods, which may partially explain its utility as a
	parent selection algorithm in the context of
	uncompromising problems.",
	notes =        "also known as \cite{6920034}",
}


@InProceedings{Spector:2012:GECCOcompANEW,
	author =	"Lee Spector",
	title =	"Assessment of Problem Modality by Differential
	Performance of Lexicase Selection in Genetic
	Programming: {A} Preliminary Report",
	booktitle =	"1st workshop on Understanding Problems (GECCO-UP)",
	year = 	"2012",
	NOeditor =	"Kent McClymont and Ed Keedwell",
	isbn13 =	"978-1-4503-1178-6",
	keywords =	"genetic algorithms, genetic programming, modal
	problems, selection, lexicase selection, problem
	metrics, modality",
	pages =	"401--408",
	month =	"7-11 " # jul,
	organisation = "SIGEVO",
	address =	"Philadelphia, Pennsylvania, USA",
	NOURL =  	"http://hampshire.edu/lspector/pubs/wk09p4-spector.pdf",
	doi =  	"doi:10.1145/2330784.2330846",
	publisher =	"ACM",
	publisher_address = "New York, NY, USA",
	size = 	"8 pages",
	abstract =	"Many potential target problems for genetic programming
	are modal in the sense that qualitatively different
	modes of response are required for inputs from
	different regions of the problem's domain. This paper
	presents a new approach to solving modal problems with
	genetic programming, using a simple and novel parent
	selection method called lexicase selection. It then
	shows how the differential performance of genetic
	programming with and without lexicase selection can be
	used to provide a measure of problem modality, and it
	argues that defining such a measure in this way is not
	as methodologically problematic as it may initially
	appear. The modality measure is illustrated through the
	analysis of genetic programming runs on a simple modal
	symbolic regression problem. This is a preliminary
	report that is intended in part to stimulate discussion
	on the significance of modal problems, methods for
	solving them, and methods for measuring the modality of
	problems. Although the core concepts in this paper are
	presented in the context of genetic programming, they
	are also relevant to applications of other forms of
	evolutionary computation to modal problems.",
	notes =	"p403 'allowing the high-performing individual [on any
	test case] to contribute to the following generation,
	regardless of [its] performance on other cases.' p405
	'with population size 10000 the overall cost of
	producing offspring using lexicase selection can exceed
	that of using ordinary tournaments by between one and
	two orders of magnitude'. (why?) Section 5: integer
	symbolic regresions with one, two or three 'modes'.
	Clojure lexicase.clj
	https://gist.github.com/lspector/2320883 Also known as
	\cite{2330846} Distributed at GECCO-2012. ACM Order
	Number 910122.",
	doi-url =	"http://dx.doi.org/10.1145/2330784.2330846",
}